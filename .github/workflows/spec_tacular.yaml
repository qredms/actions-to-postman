name: Spec-tacular
description: |
  Keeping your OpenAPI specs and Postman collections in perfect harmony.

on:
  workflow_call:
    inputs:
      team_name:
        description: 'Team name for the Postman collection'
        required: true
        type: string
      project:
        description: 'Desired folder structure (e.g., "Your Team/Your Project"). Leave empty for root.'
        required: false
        type: string
        default: ''
      openapi_file_path:
        description: 'Path to the OpenAPI specification file'
        required: true
        default: 'cloudformation/openapi.yaml'
        type: string
      overwrite_existing_params:
        description: 'Whether to overwrite existing environment variables with same name from the OpenAPI spec (true/false)'
        required: false
        type: string
        default: 'false'
    secrets:
      postman_api_key:
        description: 'Postman API Key'
        required: true
      postman_workspace_id:
        description: 'Postman Workspace ID'
        required: true
    outputs:
      collection_uid:
        description: 'The UID of the created or updated Postman collection'
        value: ${{ jobs.manage_collection.outputs.collection_uid }}

jobs:
  manage_collection:
    runs-on: ubuntu-latest
    outputs:
      collection_uid: ${{ steps.set_final_outputs.outputs.collection_uid }}
      collection_url: ${{ steps.set_final_outputs.outputs.collection_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Validate OpenAPI file
        run: |
          INPUT_OAS_FILE="${{ inputs.openapi_file_path }}"
          if [ ! -f "$INPUT_OAS_FILE" ]; then
            echo "Error: OpenAPI file not found at $INPUT_OAS_FILE"
            exit 1
          fi
          echo "OpenAPI file $INPUT_OAS_FILE found."

      - name: Install openapi-to-postmanv2
        run: npm install -g openapi-to-postmanv2

      - name: Generate Postman Collection from OpenAPI
        id: generate_collection
        run: |
          INPUT_OAS_FILE="${{ inputs.openapi_file_path }}"
          OUTPUT_COLLECTION_FILE="generated_postman_collection.json"
          RAW_ITEMS_FILE="raw_project_items.json"
          ENV_VARS_FILE="new_environment_vars.json"
          
          # Create a config file with options
          CONFIG_FILE="openapi_converter_config.json"
          cat > "$CONFIG_FILE" << EOF
          {
            "folderStrategy": "tags",
            "requestParametersResolution": "Example",
            "optimizeConversion": true,
            "requestNameSource": "URL",
            "shortValidationErrors": true
          }
          EOF
          
          echo "Running OpenAPI to Postman conversion for $INPUT_OAS_FILE with config..."
          openapi2postmanv2 -s "$INPUT_OAS_FILE" -o "$OUTPUT_COLLECTION_FILE" -c "$CONFIG_FILE" -p
          
          if [ ! -f "$OUTPUT_COLLECTION_FILE" ]; then
            echo "Error: Conversion failed to generate output file $OUTPUT_COLLECTION_FILE"
            exit 1
          fi
          if ! jq empty "$OUTPUT_COLLECTION_FILE" 2>/dev/null; then
            echo "Error: Generated collection $OUTPUT_COLLECTION_FILE is not valid JSON!"
            head -c 200 "$OUTPUT_COLLECTION_FILE"
            exit 1
          fi
          echo "Generated Postman collection: $OUTPUT_COLLECTION_FILE"
          
          # Extract the raw items (requests) from the generated collection
          jq '.item // []' "$OUTPUT_COLLECTION_FILE" > "$RAW_ITEMS_FILE"
          if ! jq empty "$RAW_ITEMS_FILE" 2>/dev/null; then
            echo "Error: Extracted raw items file '$RAW_ITEMS_FILE' is not valid JSON!"
            cat "$RAW_ITEMS_FILE"
            exit 1
          fi
          echo "Extracted raw items to $RAW_ITEMS_FILE"
          
          # Extract environment variables from the generated collection
          jq '.variable // []' "$OUTPUT_COLLECTION_FILE" > "$ENV_VARS_FILE"
          if ! jq empty "$ENV_VARS_FILE" 2>/dev/null; then
            echo "Error: Extracted environment variables file is not valid JSON!"
            cat "$ENV_VARS_FILE"
            exit 1
          fi
          ENV_COUNT=$(jq 'length' "$ENV_VARS_FILE")
          echo "Extracted $ENV_COUNT environment variables from OpenAPI spec"
          
          echo "generated_collection_path=$OUTPUT_COLLECTION_FILE" >> $GITHUB_OUTPUT
          echo "raw_items_path=$RAW_ITEMS_FILE" >> $GITHUB_OUTPUT
          echo "new_env_vars_path=$ENV_VARS_FILE" >> $GITHUB_OUTPUT

      - name: Determine Action (Check if Team Collection Exists by Name)
        id: determine_action
        env:
          POSTMAN_API_KEY: ${{ secrets.postman_api_key }}
          POSTMAN_WORKSPACE_ID: ${{ secrets.postman_workspace_id }}
        run: |
          # Collection name for search is the Team Name
          TEAM_COLLECTION_NAME="${{ inputs.team_name }}"
          echo "Searching for existing Team Collection named: $TEAM_COLLECTION_NAME"

          echo "action=create" >> $GITHUB_OUTPUT # Default to create
          echo "target_collection_uid=" >> $GITHUB_ENV 

          echo "Listing collections in workspace ${{ secrets.postman_workspace_id }} to find if '$TEAM_COLLECTION_NAME' exists..."
          API_URL="https://api.getpostman.com/collections?workspace=${{ secrets.postman_workspace_id }}"
          
          response=$(curl --location --request GET "$API_URL" \
            --header "X-Api-Key: $POSTMAN_API_KEY" \
            --silent --write-out "HTTPSTATUS:%{http_code}")
          
          http_status=$(echo "$response" | tr -d '\\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo "$response" | sed -e 's/HTTPSTATUS:.*//')
          
          echo "List Collections Response Body (first 500 chars): $(echo "$body" | head -c 500)"
          echo "List Collections HTTP Status: $http_status"
          
          if [ "$http_status" -ne 200 ]; then
            echo "Error listing collections. Status: $http_status."
            echo "Proceeding to create a new collection due to an error fetching existing collections."
            exit 0 # Keep action=create and target_collection_uid empty
          fi

          EXISTING_COLLECTION_UID=$(echo "$body" | jq -r --arg name "$TEAM_COLLECTION_NAME" '.collections[] | select(.name == $name) | .uid' | head -n 1) # .uid not .id
          
          if [ -n "$EXISTING_COLLECTION_UID" ] && [ "$EXISTING_COLLECTION_UID" != "null" ]; then
            echo "Team Collection named '$TEAM_COLLECTION_NAME' found with UID: $EXISTING_COLLECTION_UID. Will update."
            echo "action=update" >> $GITHUB_OUTPUT
            echo "target_collection_uid=$EXISTING_COLLECTION_UID" >> $GITHUB_ENV
          else
            echo "No Team Collection named '$TEAM_COLLECTION_NAME' found in workspace. Will create a new one."
            # action remains create (default) and target_collection_uid remains empty
          fi

      - name: Fetch Existing Team Collection for Update
        id: fetch_existing_collection
        if: steps.determine_action.outputs.action == 'update'
        env:
          POSTMAN_API_KEY: ${{ secrets.postman_api_key }}
          TARGET_COLLECTION_UID: ${{ env.target_collection_uid }}
        run: |
          echo "Fetching existing team collection with UID: $TARGET_COLLECTION_UID"
          API_URL="https://api.getpostman.com/collections/$TARGET_COLLECTION_UID"
          OUTPUT_FILE="existing_team_collection.json"

          response=$(curl --location --request GET "$API_URL" \
            --header "X-Api-Key: $POSTMAN_API_KEY" \
            --silent --write-out "HTTPSTATUS:%{http_code}")
          
          http_status=$(echo "$response" | tr -d '\\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo "$response" | sed -e 's/HTTPSTATUS:.*//')

          if [ "$http_status" -eq 200 ]; then
            echo "$body" > "$OUTPUT_FILE"
            if ! jq empty "$OUTPUT_FILE" 2>/dev/null; then
              echo "Error: Fetched existing collection is not valid JSON!"
              cat "$OUTPUT_FILE"; exit 1
            fi
            echo "Fetched existing collection and saved to $OUTPUT_FILE"
            echo "existing_collection_path=$OUTPUT_FILE" >> $GITHUB_OUTPUT
          else
            echo "Error fetching existing collection. Status: $http_status. Body: $body"
            echo "Cannot proceed with update. Consider this a failure or switch to create if appropriate."
            exit 1 # Fail the step if fetching fails for an update
          fi
          
      - name: Extract Environment Variables from Existing Collection
        id: extract_environment
        if: steps.determine_action.outputs.action == 'update'
        env:
          EXISTING_COLLECTION_FILE_PATH: ${{ steps.fetch_existing_collection.outputs.existing_collection_path }}
        run: |
          ENV_VARS_FILE="existing_environment_vars.json"
          
          # Extract the environment variables section from the existing collection
          jq '.collection.variable // []' "$EXISTING_COLLECTION_FILE_PATH" > "$ENV_VARS_FILE"
          
          if ! jq empty "$ENV_VARS_FILE" 2>/dev/null; then
            echo "Error: Extracted environment variables file is not valid JSON!"
            cat "$ENV_VARS_FILE"; exit 1
          fi
          
          ENV_COUNT=$(jq 'length' "$ENV_VARS_FILE")
          echo "Extracted $ENV_COUNT environment variables from existing collection"
          echo "environment_vars_path=$ENV_VARS_FILE" >> $GITHUB_OUTPUT
      
      - name: Merge Environment Variables
        id: merge_environment
        if: steps.determine_action.outputs.action == 'update'
        env:
          EXISTING_ENV_FILE: ${{ steps.extract_environment.outputs.environment_vars_path }}
          NEW_ENV_FILE: ${{ steps.generate_collection.outputs.new_env_vars_path }}
          OVERWRITE_EXISTING: ${{ inputs.overwrite_existing_params }}
        run: |
          MERGED_ENV_FILE="merged_environment_vars.json"
          
          # Read existing and new environment variables
          EXISTING_ENV=$(cat "$EXISTING_ENV_FILE")
          NEW_ENV=$(cat "$NEW_ENV_FILE")
          
          echo "Merging environment variables..."
          echo "Existing variables: $(jq 'length' "$EXISTING_ENV_FILE")"
          echo "New variables: $(jq 'length' "$NEW_ENV_FILE")"
          
          # Execute variable merging using jq
          if [ "$OVERWRITE_EXISTING" == "true" ]; then
            echo "Strategy: Overwrite existing variables with same names from OpenAPI"
            
            # Create a merged array by:
            # 1. First adding all existing variables that DON'T have a corresponding key in new variables
            # 2. Then adding ALL new variables (which will overwrite any existing with same key)
            jq -n --argjson existing "$EXISTING_ENV" --argjson new "$NEW_ENV" '
              # Convert arrays to objects keyed by variable name for easier merging
              ($existing | map({key: .key, value: .}) | from_entries) as $existing_obj |
              ($new | map({key: .key, value: .}) | from_entries) as $new_obj |
              
              # Create merged object (new variables will overwrite existing)
              ($existing_obj + $new_obj) |
              
              # Convert back to array for output
              to_entries | map(.value)
            ' > "$MERGED_ENV_FILE"
            
          else
            echo "Strategy: Keep existing variables, only add new ones not present in collection"
            
            # Create a merged array by:
            # 1. First adding ALL existing variables (keeping their values)
            # 2. Then adding only NEW variables that don't already exist
            jq -n --argjson existing "$EXISTING_ENV" --argjson new "$NEW_ENV" '
              # Get array of existing variable keys for checking
              ($existing | map(.key)) as $existing_keys |
              
              # Start with all existing variables
              $existing +
              
              # Add only new variables that dont exist in existing variables
              ($new | map(select(.key as $key | $existing_keys | index($key) | not)))
            ' > "$MERGED_ENV_FILE"
          fi
          
          if ! jq empty "$MERGED_ENV_FILE" 2>/dev/null; then
            echo "Error: Merged environment variables file is not valid JSON!"
            cat "$MERGED_ENV_FILE"; exit 1
          fi
          
          MERGED_COUNT=$(jq 'length' "$MERGED_ENV_FILE")
          echo "Final merged environment variables count: $MERGED_COUNT"
          echo "merged_env_vars_path=$MERGED_ENV_FILE" >> $GITHUB_OUTPUT

      - name: Prepare Collection JSON for API Request
        id: prepare_api_payload
        env:
          ACTION: ${{ steps.determine_action.outputs.action }}
          TEAM_NAME: ${{ inputs.team_name }}
          PROJECT_NAME: ${{ inputs.project }}
          RAW_ITEMS_FILE_PATH: ${{ steps.generate_collection.outputs.raw_items_path }}
          EXISTING_COLLECTION_FILE_PATH: ${{ steps.fetch_existing_collection.outputs.existing_collection_path }}
          NEW_ENV_VARS_FILE_PATH: ${{ steps.generate_collection.outputs.new_env_vars_path }}
          MERGED_ENV_VARS_FILE_PATH: ${{ steps.merge_environment.outputs.merged_env_vars_path }}
        run: |
          # Script inputs available via env vars defined above
          API_PAYLOAD_FILE="postman_api_payload.json"

          echo "Preparing API Payload. Action: $ACTION"
          echo "Team: $TEAM_NAME, Project: $PROJECT_NAME"

          NEW_PROJECT_REQUESTS_JSON=$(cat "$RAW_ITEMS_FILE_PATH")

          # Determine which environment variables to use
          if [ "$ACTION" == "update" ] && [ -f "$MERGED_ENV_VARS_FILE_PATH" ]; then
            echo "Using merged environment variables"
            ENV_VARS_TO_USE=$(cat "$MERGED_ENV_VARS_FILE_PATH")
          elif [ -f "$NEW_ENV_VARS_FILE_PATH" ]; then
            echo "Using only new environment variables from OpenAPI spec"
            ENV_VARS_TO_USE=$(cat "$NEW_ENV_VARS_FILE_PATH")
          else
            echo "No environment variables to include"
            ENV_VARS_TO_USE="[]"
          fi

          # This is the content for the specific project (requests wrapped in a project folder, or raw requests if no project)
          if [ -n "$PROJECT_NAME" ] && [ "$PROJECT_NAME" != "\"\"" ] && [ "$PROJECT_NAME" != "''" ]; then
            # PROJECT_CONTENT_JSON will be an array containing a single folder object for the project
            PROJECT_CONTENT_JSON=$(jq -n --arg project_name "$PROJECT_NAME" --argjson items "$NEW_PROJECT_REQUESTS_JSON" \
              '[{"name": $project_name, "item": $items, "_postman_isSubFolder": true}]')
          else
            # No project name, content is the raw requests array directly
            PROJECT_CONTENT_JSON="$NEW_PROJECT_REQUESTS_JSON"
          fi

          if [ "$ACTION" == "create" ]; then
            echo "Action: Create. Preparing new Team Collection: $TEAM_NAME"
            # For a new Team collection, its 'item' array is the PROJECT_CONTENT_JSON
            jq -n --arg team_name_val "$TEAM_NAME" \
               --argjson items_array "$PROJECT_CONTENT_JSON" \
               --argjson env_vars "$ENV_VARS_TO_USE" \
              '{ "collection": { "info": { "name": $team_name_val, "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json" }, "item": $items_array, "variable": $env_vars } }' > "$API_PAYLOAD_FILE"

          elif [ "$ACTION" == "update" ]; then
            echo "Action: Update. Preparing to update Team Collection: $TEAM_NAME"
            EXISTING_TEAM_COLLECTION_ENTIRE_JSON=$(cat "$EXISTING_COLLECTION_FILE_PATH")

            if [ -n "$PROJECT_NAME" ] && [ "$PROJECT_NAME" != "\"\"" ] && [ "$PROJECT_NAME" != "''" ]; then
              echo "Updating/Adding Project Folder: $PROJECT_NAME within Team Collection $TEAM_NAME"
              # PROJECT_CONTENT_JSON is `[{"name":"MyProject", "item":[...]}]`
              
              # Update items and environment variables
              jq --arg project_name_val "$PROJECT_NAME" \
                 --argjson new_project_folder_array "$PROJECT_CONTENT_JSON" \
                 --argjson env_vars "$ENV_VARS_TO_USE" \
                '.collection.item = ([.collection.item[]? | select(.name != $project_name_val)] + $new_project_folder_array) | .collection.variable = $env_vars' \
                <<< "$EXISTING_TEAM_COLLECTION_ENTIRE_JSON" > "$API_PAYLOAD_FILE"
            else
              echo "No project specified for update. Replacing all root items in Team Collection: $TEAM_NAME"
              
              # Replace items and update environment variables
              jq --argjson new_root_items "$PROJECT_CONTENT_JSON" \
                 --argjson env_vars "$ENV_VARS_TO_USE" \
                '.collection.item = $new_root_items | .collection.variable = $env_vars' \
                <<< "$EXISTING_TEAM_COLLECTION_ENTIRE_JSON" > "$API_PAYLOAD_FILE"
            fi
          fi
          
          if ! jq empty "$API_PAYLOAD_FILE" 2>/dev/null; then
            echo "Error: Final API payload '$API_PAYLOAD_FILE' is not valid JSON!"
            cat "$API_PAYLOAD_FILE"; exit 1
          fi
          echo "Prepared API payload file: $API_PAYLOAD_FILE"
          ls -l "$API_PAYLOAD_FILE" # Show file size for debugging
          echo "api_payload_path=$API_PAYLOAD_FILE" >> $GITHUB_OUTPUT

      - name: Update Existing Collection
        id: update_collection_step
        if: steps.determine_action.outputs.action == 'update'
        env:
          POSTMAN_API_KEY: ${{ secrets.postman_api_key }}
          TARGET_COLLECTION_UID: ${{ env.target_collection_uid }}
          API_PAYLOAD_FILE: ${{ steps.prepare_api_payload.outputs.api_payload_path }}
        run: |
          echo "Updating existing collection with UID: $TARGET_COLLECTION_UID"
          API_URL="https://api.getpostman.com/collections/$TARGET_COLLECTION_UID"
          
          response=$(curl --location --request PUT "$API_URL" \
            --header "X-Api-Key: $POSTMAN_API_KEY" \
            --header "Content-Type: application/json" \
            --data-binary "@$API_PAYLOAD_FILE" \
            --silent --write-out "HTTPSTATUS:%{http_code}")
          
          http_status=$(echo "$response" | tr -d '\\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo "$response" | sed -e 's/HTTPSTATUS:.*//')
          echo "Update Response Body: $body"
          echo "Update HTTP Status: $http_status"

          if [ "$http_status" -eq 200 ] || [ "$http_status" -eq 201 ]; then
            echo "Postman collection updated successfully."
            updated_uid=$(echo "$body" | jq -r '.collection.uid')
            echo "collection_uid_output=$updated_uid" >> $GITHUB_OUTPUT
          else
            echo "Error updating Postman collection. Status: $http_status. Body: $body"
            # If update fails, maybe we should try to create? Or just fail. For now, fail.
            exit 1
          fi

      - name: Create New Collection
        id: create_collection_step
        if: steps.determine_action.outputs.action == 'create'
        env:
          POSTMAN_API_KEY: ${{ secrets.postman_api_key }}
          POSTMAN_WORKSPACE_ID: ${{ secrets.postman_workspace_id }}
          API_PAYLOAD_FILE: ${{ steps.prepare_api_payload.outputs.api_payload_path }}
        run: |
          echo "Creating new collection..."
          API_URL="https://api.getpostman.com/collections?workspace=$POSTMAN_WORKSPACE_ID"

          response=$(curl --location --request POST "$API_URL" \
            --header "X-Api-Key: $POSTMAN_API_KEY" \
            --header "Content-Type: application/json" \
            --data-binary "@$API_PAYLOAD_FILE" \
            --silent --write-out "HTTPSTATUS:%{http_code}")

          http_status=$(echo "$response" | tr -d '\\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo "$response" | sed -e 's/HTTPSTATUS:.*//')
          echo "Create Response Body: $body"
          echo "Create HTTP Status: $http_status"

          if [ "$http_status" -eq 200 ] || [ "$http_status" -eq 201 ]; then
            echo "New Postman collection created successfully."
            created_uid=$(echo "$body" | jq -r '.collection.uid')
            echo "collection_uid_output=$created_uid" >> $GITHUB_OUTPUT
            echo "IMPORTANT: If this was an initial run, store this UID for future updates: $created_uid"
          else
            echo "Error creating Postman collection. Status: $http_status. Body: $body"
            exit 1
          fi
          