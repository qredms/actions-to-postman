openapi: '3.0.3'
info:
  title:
    Ref: AWS::StackName
  version: 1.0.0
  description: Qred Card public facing API

servers:
  - url: '{baseUrlNew}' # This will be converted to {{baseUrl}} in Postman request
    variables:
      baseUrl:
        default: 'https://test.api.qred.com/v1' # Default value (e.g., for test)
        description: 'Base URL for the API. Can be set to the test or production environment.'
        enum: # List of allowed/example values
          - 'https://test.api.qred.com/v1'  # Test environment
          - 'https://api.qred.com/v1'        # Production environment

# Api Paths
paths:
  # Transaction Notifications
  /notifications:
    post:
      summary: Receives transaction notifications
      operationId: PostNotification
      tags:
        - Notifications
      requestBody:
        description: Notification proxy request
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Notification received response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notificationCreatedResponse'
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-request-validator: validate-none
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: aws
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:sns:action/Publish
        credentials:
          Fn::Sub: ${NotificationsSNSRole.Arn}
        requestParameters:
          integration.request.querystring.TopicArn:
            Fn::Sub: "'${NotificationsTopic}'"
          integration.request.querystring.Message: "method.request.body"
          integration.request.querystring.MessageAttributes.entry.1.Name: "'notificationType'"
          integration.request.querystring.MessageAttributes.entry.1.Value.DataType: "'String'"
          integration.request.querystring.MessageAttributes.entry.1.Value.StringValue: "method.request.body.type"
        responses:
          default:
            statusCode: 200
          '200':
            statusCode: 200
            responseTemplates:
              application/json: "#set ($root=$input.path('$')) { \"requestId\": \"$root.PublishResponse.PublishResult.MessageId\" }"

  /v1/authenticate/{customerNumber}/{sessionId}:
    post:
      summary: Recieves authentication notifications for 3D Secure payments
      operationId: Authenticate3DS
      tags:
        - TransactionAuthentication
        - 3DSecure
      parameters:
        - in: path
          name: customerNumber
          required: true
          schema:
            type: string
        - in: path
          name: sessionId
          required: true
          schema:
            type: string
      requestBody:
        description: 3DsAuthenticationRequest
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Authentication request received response
          content:
            application/json:
              schema:
                type: object
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-request-validator: validate-none
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 1.0
        type: aws
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:sns:action/Publish
        credentials:
          Fn::Sub: ${3DSAuthenticationSNSRole.Arn}
        requestParameters:
          integration.request.querystring.TopicArn:
            Fn::Sub: "'${3DSAuthenticationTopic}'"
          integration.request.querystring.Message: "method.request.body"
          integration.request.querystring.MessageAttributes.entry.1.Name: "'customerNumber'"
          integration.request.querystring.MessageAttributes.entry.1.Value.DataType: "'String'"
          integration.request.querystring.MessageAttributes.entry.1.Value.StringValue: "method.request.path.customerNumber"
          integration.request.querystring.MessageAttributes.entry.2.Name: "'sessionId'"
          integration.request.querystring.MessageAttributes.entry.2.Value.DataType: "'String'"
          integration.request.querystring.MessageAttributes.entry.2.Value.StringValue: "method.request.path.sessionId"
        responses:
          default:
            statusCode: 200
          '200':
            statusCode: 200
            responseTemplates:
              application/json: "#set ($root=$input.path('$')) { \"requestId\": \"$root.PublishResponse.PublishResult.MessageId\" }"

  /v1/callback:
    get:
      summary: Receives redirect/callback from Signicat
      operationId: SignicatCallback
      tags:
        - Signicat
      security:
        - NONE: [ ]
      responses:
        '200':
          description: Successfully processed callback
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signicatResponse'
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/Access-Control-Allow-Methods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/Access-Control-Allow-Headers'
      x-amazon-apigateway-request-validator: validate-none
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignicatCallback.Arn}/invocations

# API Components
components:
  schemas:
    notificationCreatedResponse:
      type: object

    signicatResponse:
      type: object


  # API Headers
  headers:
    Access-Control-Allow-Origin:
      schema:
        type: string
    Access-Control-Allow-Methods:
      schema:
        type: string
    Access-Control-Allow-Headers:
      schema:
        type: string

x-amazon-apigateway-request-validators:
  validate-all:
    validateRequestBody: true
    validateRequestParameters: true
    validateRequestHeaders: true
  validate-none:
    validateRequestBody: false
    validateRequestParameters: false
    validateRequestHeaders: false

x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Authorization'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'POST, PUT, PATCH, GET, OPTIONS'"
    statusCode: '400'

  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Authorization'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'POST, PUT, PATCH, GET, OPTIONS'"
    statusCode: '500'
